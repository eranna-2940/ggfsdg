how can i store form data as an array to localstorage in reactjs


export default function App() {
  const [initialValues, setInitialValues] = useState({
    companyname: "",
    email: "",
    phone: "",
    website: ""
  });
  const [formValues, setFormValues] = useState([]);

  const submitForm = () => {
    setFormValues((prevFormValues) => [...prevFormValues, initialValues]);
  };

  useEffect(() => {
    localStorage.setItem("formValues", JSON.stringify(formValues));
  }, [formValues]);
  return (
    <div className="App">
      <div>
        companyname
        <input
          value={initialValues.companyname}
          onChange={(e) =>
            setInitialValues({ ...initialValues, companyname: e.target.value })
          }
        />
      </div>
      <div>
        website
        <input
          value={initialValues.website}
          onChange={(e) =>
            setInitialValues({ ...initialValues, website: e.target.value })
          }
        />
      </div>
      <button onClick={submitForm}>onSubmit </button>
    </div>
  );
}


example of localStorage
import { useEffect, useState } from 'react'

function App() {

  const [User, setUser] = useState({
    Name: '',
    Pass: '',
    Email: '',
  })

  const handle = () => {
    const nextUser = JSON.stringify(User)
    localStorage.setItem('user', nextUser)
  }
  const remove = () => {
    localStorage.removeItem('user')
  }

  useEffect(() => {
    const storedUser = localStorage.getItem('user')
    if (storedUser) {
      setUser(JSON.parse(storedUser))
    }
  }, [])
  return (
    <div className="App">
      <h1>Name of the user:</h1>
      <input
        placeholder="Name"
        name="Name"
        value={User.Name}
        onChange={(e) => setUser({ ...User, [e.target.name]: e.target.value })}
      />
      <h1>Password of the user:</h1>
      <input
        type="password"
        name="Pass"
        placeholder="Password"
        value={User.Pass}
        onChange={(e) => setUser({ ...User, [e.target.name]: e.target.value })}
      />
      <h1>Email of the user:</h1>
      <input
        type="mail"
        name="Email"
        placeholder="Email"
        value={User.Email}
        onChange={(e) => setUser({ ...User, [e.target.name]: e.target.value })}
      />
      <div>
        <button onClick={handle}>Done</button>
      </div>

      {User.Name && (
        <div>
          Name: <p>{User.Name}</p>
        </div>
      )}
      {User.Pass && (
        <div>
          Password: <p>{User.Pass}</p>
        </div>
      )}
      {User.Email && (
        <div>
          Password: <p>{User.Email}</p>
        </div>
      )}
      <div>
        <button onClick={remove}>Remove</button>
      </div>
    </div>
  )
}

export default App


function App() {
  const [User, setUser] = useState([
    {
      Name:'',
      Pass:'',
      Email:'',
    }
  ]);

 
  const [storedUser,setstoredUser]=useState([])

  
  const handle = () => {

     localStorage.setItem(JSON.stringfy(...User))
    
     setstoredUser(...User);

  };
  const remove = () => {
     localStorage.removeItem();

  };
  return (
    <div className="App">
         <h1>Name of the user:</h1>
         <input
            placeholder="Name"
            name='Name'
            value={User.Name}
            onChange={(e) => setUser({...User,[e.target.name]:[e.target.value]})}
         />
         <h1>Password of the user:</h1>
         <input
            type="password"
            name="Pass"
            placeholder="Password"
            value={User.Pass}
            onChange={(e) => setUser({...User,[e.target.name]:[e.target.value]})}
         />
           <h1>Email of the user:</h1>
          <input
            type="mail"
            name="Email"
            placeholder="Email"
            value={User.Email}
            onChange={(e) => setUser({...User,[e.target.name]:[e.target.value]})}
         />
         <div>
            <button onClick={handle}>Done</button>
         </div>
         {storedUser.Name && (
            <div>
               Name: <p>{localStorage.getItem('Name')}</p>
            </div>
         )}
         {storedUser.Pass && (
            <div>
               Password: <p>{localStorage.getItem('Pass')}</p>
            </div>
         )}
          {storedUser.Email && (
            <div>
               Password: <p>{localStorage.getItem('Email')}</p>
            </div>
         )}
         <div>
            <button onClick={remove}>Remove</button>
         </div>
      </div>
   ); 
}

export default App;
I did localstorage.setItem() in one component and i want to do localstorage.getItem() in second component


import React from 'react';
import PresentationalComponent from './PresentationalComponent'

const containerComponent = () => {
    localStorage.setItem("hello", "hi"); // localStorage only accepts string values

    return <PresentationalComponent />
}
export default containerComponent;
PresentationalComponent.js

import React from 'react';

const PresentationalComponent = () => {
    return <h1>{`The hello localStorage key has a value of ${localStorage.getItem("hello")}`}</h1>
}

export default PresentationalComponent;


how to use to store data in localStorage when using use form hook 
Method : 2
<input
  placeholder="name"
  {...register("name", {
    onChange: handleChange,
    name: "name",
    value: values.name
  })}
/>

when combine two onchange and useform hook in get validation required;
Method : 1
const fieldRegister =  {...register("name", { required: "Required" })} 
  const origOnChange = fieldRegister.onChange
  fieldRegister.onChange = (e) => {
      const res = origOnChange(e)
      const value = e.target.value
      setName(value);
      // do something with value
      return res
  }
  const fieldRegister2 =   {...register("dbname", { required: "Required" })}
  const origOnChange2 = fieldRegister2.onChange
  fieldRegister2.onChange= (e) => {
      const res= origOnChange2(e)
      const value = e.target.value
      setDdname(value);
      // do something with value
      return res
  }
  const result =  {...register("dbuname", { required: "Required" })}
  Method : 3
  const result =  {...register("dbuname", { required: "Required" })}
  {...result}
                              onChange={(e) => {
                                result.onChange(e);
                                handlechange(e)
                           }}

system variables
path of softwares;
C:\Program Files\Maven\apache-maven-4.0.0-alpha-5-bin\apache-maven-4.0.0-alpha-5\bin
C:\Program Files\Java\jdk-19\bin
C:\Program Files\Java\jdk-19
C:\Program Files\MySQL\MySQL Server 5.7\bin
C:\Users\User1\AppData\Local\Programs\Python\Python311
C:\Users\User1\AppData\Local\Programs\Python\Python311\Scripts
C:\Program Files\Spring-Boot\spring-3.0.4\bin

Java_home
C:\Program Files\Java\jdk-19
maven_home
C:\Program Files\Maven\apache-maven-4.0.0-alpha-5-bin\apache-maven-4.0.0-alpha-5

use variables
C:\Program Files\MySQL\MySQL Shell 8.0\bin\
C:\Program Files\Java\jdk-19\bin



	Props are read-only.	State changes can be asynchronous.
2.	Props are immutable.	State is mutable.
3.	Props allow you to pass data from one component to other components as an argument.	State holds information about the components.
4.	Props can be accessed by the child component.	State cannot be accessed by child components.
5.	Props are used to communicate between components.	States can be used for rendering dynamic changes with the component.
6.	Stateless component can have Props.	Stateless components cannot have State.
7.	Props make components reusable.	State cannot make components reusable.
8.	Props are external and controlled by whatever renders the component.	The State is internal and controlled by the React Component itself.